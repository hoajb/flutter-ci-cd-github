name: CI-CD Android and IOS

on:
    pull_request:
      branches:
        - main
#  push: //for testing
#    branches:
#      - dev

jobs:
  analyze_code_and_test:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
      # Checkout Repo code
      - name: Checkout Repo
        uses: actions/checkout@v3
      #        with:
      #          token: ${{ secrets.REPO_TOKEN }}
      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
      - name: Get flutter dependencies.
        run: flutter pub get
      - name: Run Tests case
        run: flutter test --coverage

  deploy-android:
    name: Build & Deploy Android Release to ${{ github.event.inputs.track }} track
    runs-on: ubuntu-latest
    timeout-minutes: 30
    #    needs: analyze_code_and_test
    steps:
      # Checkout Repo code
      - name: Checkout Repo
        uses: actions/checkout@v3
      #Config keystore
      - name: Configure Keystore
        env:
          RELEASE_STORE_FILE_BASE_64: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
        run: |
          echo "$RELEASE_STORE_FILE_BASE_64" | base64 --decode > app-keystore.jks
          echo "RELEASE_STORE_FILE=../app-keystore.jks" >> keystore.properties
          echo "RELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS" >> keystore.properties
          echo "RELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD" >> keystore.properties
          echo "RELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" >> keystore.properties
        working-directory: android

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter doctor -v

      # Build
      - name: Build apk
        run: |
          flutter build apk --release
          
          echo "Removing signing files for extra security"
          rm android/app-keystore.jks
          rm android/keystore.properties

      #Distribute Firebase
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID_ANDROID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          #          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk

  deploy-ios:
    name: Build & Deploy IOS Release
    # needs: analyze_code_and_test
    runs-on: macos-12
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Xcode '14.2'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 14.2
      - name: Prepare code signing
        env:
          FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
          FS_P12_FILE: ${{ secrets.FS_P12_FILE }}
          FS_P12_PASS: ${{ secrets.FS_P12_PASS }}
          FS_PROV_FILE: ${{ secrets.FS_PROV_FILE }}
        run: |
          echo "Convert base64 strings to files"
          echo "$FS_PROV_FILE" >> prov.temp.txt
          echo "$FS_P12_FILE ">> cert.temp.txt
          base64 --decode prov.temp.txt > prov.temp.mobileprovision
          base64 --decode cert.temp.txt > cert.temp.p12
          echo "Copy provisioning file to the correct locations"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
          echo "Create a new keychain & import p12 certificate"
          security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
          security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
          echo "Set new keychain as a default"
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          echo "Clean up temp files"
          rm *.temp.*

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter doctor -v
      - name: Build IPA
        env:
          FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
        run: |
          echo "Unlocking keychain"
          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          # Important, just in case the build takes longer than the default 300s timeout
          # Otherwise the build will freeze at signing the frameworks if the keychain is locked
          echo "Increasing keychain auto lock timeout"
          security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
          
          flutter build ipa --release
          echo "Locking keychain"
          security lock-keychain ~/Library/Keychains/build.keychain
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ env.PATH_TO_IPA }}
      - name: Publishing app to TestFlight
        env:
          IOS_API_ISSUER_ID: ${{ secrets.IOS_API_ISSUER_ID }}
          IOS_API_KEY_ID: ${{ secrets.IOS_API_KEY_ID }}
          IOS_API_KEY: ${{ secrets.IOS_API_KEY }}
          PATH_TO_IPA: 'build/ios/ipa/flutter_github_actions_basics.ipa'
        run: |
          echo "Setup private key"
          mkdir ~/.appstoreconnect/private_keys/
          echo "$IOS_API_KEY" >> "~/.appstoreconnect/private_keys/AuthKey_${{ env.IOS_API_KEY_ID }}.p8"
          
          echo "Upload to TestFlight"
          xcrun altool --upload-app -t ios -f $PATH_TO_IPA --apiKey "$IOS_API_KEY_ID" --apiIssuer "$IOS_API_ISSUER_ID"
          echo "Clean up"
          rm -rf ~/.appstoreconnect/private_keys/
